/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View, } from 'react-native';
import { styled, } from '../../theme';
import { SelectOption, } from './selectOption.component';
class SelectGroupOptionComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { itemPaddingHorizontal, ...containerStyles } = source;
            return {
                container: containerStyles,
                item: {
                    paddingHorizontal: itemPaddingHorizontal,
                },
            };
        };
        this.getMainItemStatus = (subItemsSelectedStatusArray) => {
            const someSelected = subItemsSelectedStatusArray
                .some((item) => item === true);
            const everySelected = subItemsSelectedStatusArray
                .every((item) => item === true);
            switch (true) {
                case (someSelected && !everySelected):
                    return { selected: true, indeterminate: true };
                case !someSelected:
                    return { selected: false, indeterminate: false };
                case everySelected:
                    return { selected: true, indeterminate: false };
            }
        };
        this.renderSubItem = (option, index) => {
            const { item, renderItem, strategy, ...restProps } = this.props;
            const returningOption = {
                item: option,
                index: index,
                separators: null,
            };
            const selected = strategy.isSelected(option);
            return renderItem ? renderItem(returningOption) : (React.createElement(SelectOption, Object.assign({}, restProps, { selected: selected, item: option })));
        };
        this.renderSubItemsElements = () => {
            const { item, themedStyle } = this.props;
            const { item: itemStyle } = this.getComponentStyle(themedStyle);
            return item.items
                .map((option, index) => {
                const element = this.renderSubItem(option, index);
                return React.cloneElement(element, {
                    ...option,
                    style: [element.props.style, itemStyle],
                    key: index,
                });
            });
        };
        this.renderMultiSelectMainElement = (subItemsElements) => {
            const { item, ...restProps } = this.props;
            const subItemsSelectedStatusArray = subItemsElements
                .map((subItem) => subItem.props.selected);
            const itemStatus = this.getMainItemStatus(subItemsSelectedStatusArray);
            return (React.createElement(SelectOption, Object.assign({}, restProps, itemStatus, { item: item })));
        };
        this.renderDefaultMainElement = () => {
            return (React.createElement(SelectOption, { item: this.props.item, disabled: true }));
        };
        this.renderMainElement = (subItemsElements) => {
            return this.props.multi ? this.renderMultiSelectMainElement(subItemsElements) : this.renderDefaultMainElement();
        };
    }
    render() {
        const { themedStyle } = this.props;
        const { container } = this.getComponentStyle(themedStyle);
        const subItemsElements = this.renderSubItemsElements();
        const mainElement = this.renderMainElement(subItemsElements);
        return (React.createElement(View, { style: container },
            mainElement,
            subItemsElements));
    }
}
SelectGroupOptionComponent.styledComponentName = 'SelectGroupOption';
export const SelectGroupOption = styled(SelectGroupOptionComponent);
//# sourceMappingURL=selectGroupOption.component.js.map