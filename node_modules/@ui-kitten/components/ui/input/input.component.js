/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { Platform, StyleSheet, TextInput, TouchableWithoutFeedback, View, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { allWithRest, isValidString, WebEventResponder, } from '../support/services';
import { FlexStyleProps, } from '../support/typings';
/**
 * Styled `Input` component.
 *
 * @extends React.Component
 *
 * @method {() => void} focus - Requests focus for the given input or view. The exact behavior triggered
 * will depend on the platform and type of view.
 *
 * @method {() => void} blur - Removes focus from an input or view. This is the opposite of `focus()`.
 *
 * @method {() => boolean} isFocused - Returns if the input is currently focused.
 *
 * @method {() => void} clear - Removes all text from the input.
 *
 * @property {boolean} disabled - Determines whether component is disabled.
 * Default is `false`.
 *
 * @property {string} status - Determines the status of the component.
 * Can be `basic`, `primary`, `success`, `info`, `warning`, `danger` or `control`.
 * Default is `basic`.
 *
 * @property {string} size - Determines the size of the component.
 * Can be `small`, `medium` or `large`.
 * Default is `medium`.
 *
 * @property {string} label - Determines label of the component.
 *
 * @property {StyleProp<TextStyle>} labelStyle - Customizes label style.
 *
 * @property {string} caption - Determines caption of the component.
 *
 * @property {StyleProp<TextStyle>} captionStyle - Customizes caption style.
 *
 * @property {string} placeholder - Determines placeholder of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {(style: StyleType) => ReactElement} icon - Determines icon of the component.
 *
 * @property {(style: StyleType) => ReactElement} captionIcon - Determines caption icon.
 *
 * @property {TextInputProps} ...TextInputProps - Any props applied to TextInput component.
 *
 * @overview-example InputSimpleUsage
 *
 * @overview-example InputStates
 *
 * @overview-example InputStatus
 *
 * @overview-example InputSize
 *
 * @overview-example InputWithIcon
 *
 * @overview-example InputWithLabel
 *
 * @overview-example InputWithCaption
 *
 * @example InputInlineStyling
 *
 * @example InputWithExternalSourceIcon
 */
export class InputComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.textInputRef = React.createRef();
        this.webEventResponder = WebEventResponder.create(this);
        this.focus = () => {
            this.textInputRef.current.focus();
        };
        this.blur = () => {
            this.textInputRef.current.blur();
        };
        this.isFocused = () => {
            return this.textInputRef.current.isFocused();
        };
        this.clear = () => {
            this.textInputRef.current.clear();
        };
        // WebEventResponderCallbacks
        this.onMouseEnter = () => {
            this.props.dispatch([Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onTextFieldFocus = (event) => {
            this.props.dispatch([Interaction.FOCUSED]);
            if (this.props.onFocus) {
                this.props.onFocus(event);
            }
        };
        this.onTextFieldBlur = (event) => {
            this.props.dispatch([]);
            if (this.props.onBlur) {
                this.props.onBlur(event);
            }
        };
        this.onIconPress = (event) => {
            if (this.props.onIconPress) {
                this.props.onIconPress(event);
            }
        };
        this.getComponentStyle = (source) => {
            const flatStyles = StyleSheet.flatten(this.props.style);
            const { rest: inputContainerStyle, ...containerStyle } = allWithRest(flatStyles, FlexStyleProps);
            const { textMarginHorizontal, textFontFamily, textFontSize, textLineHeight, textFontWeight, textColor, placeholderColor, iconWidth, iconHeight, iconMarginHorizontal, iconTintColor, labelColor, labelFontSize, labelLineHeight, labelMarginBottom, labelFontWeight, captionMarginTop, captionColor, captionFontSize, captionLineHeight, captionFontWeight, captionIconWidth, captionIconHeight, captionIconMarginRight, captionIconTintColor, ...containerParameters } = source;
            return {
                container: containerStyle,
                inputContainer: {
                    ...containerParameters,
                    ...inputContainerStyle,
                },
                captionContainer: {
                    marginTop: captionMarginTop,
                },
                text: {
                    marginHorizontal: textMarginHorizontal,
                    fontFamily: textFontFamily,
                    fontSize: textFontSize,
                    // FIXME: RN issue (https://github.com/facebook/react-native/issues/7823)
                    // lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    color: textColor,
                },
                placeholder: {
                    color: placeholderColor,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginHorizontal: iconMarginHorizontal,
                    tintColor: iconTintColor,
                },
                label: {
                    color: labelColor,
                    fontSize: labelFontSize,
                    lineHeight: labelLineHeight,
                    marginBottom: labelMarginBottom,
                    fontWeight: labelFontWeight,
                },
                captionIcon: {
                    width: captionIconWidth,
                    height: captionIconHeight,
                    tintColor: captionIconTintColor,
                    marginRight: captionIconMarginRight,
                },
                captionLabel: {
                    fontSize: captionFontSize,
                    fontWeight: captionFontWeight,
                    lineHeight: captionLineHeight,
                    color: captionColor,
                },
            };
        };
        this.renderIconTouchableElement = (style) => {
            const iconElement = this.renderIconElement(style);
            return (React.createElement(TouchableWithoutFeedback, { onPress: this.onIconPress }, iconElement));
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return React.cloneElement(iconElement, {
                key: 0,
                style: [style, styles.icon, iconElement.props.style],
            });
        };
        this.renderLabelElement = (style) => {
            return (React.createElement(Text, { key: 1, style: [style, styles.label, this.props.labelStyle] }, this.props.label));
        };
        this.renderCaptionElement = (style) => {
            return (React.createElement(Text, { key: 2, style: [style, styles.captionLabel, this.props.captionTextStyle] }, this.props.caption));
        };
        this.renderCaptionIconElement = (style) => {
            const iconElement = this.props.captionIcon(style);
            return React.cloneElement(iconElement, {
                key: 3,
                style: [style, styles.captionIcon, iconElement.props.style],
            });
        };
        this.renderComponentChildren = (style) => {
            const { icon, label, captionIcon, caption } = this.props;
            return [
                icon && this.renderIconTouchableElement(style.icon),
                isValidString(label) && this.renderLabelElement(style.label),
                isValidString(caption) && this.renderCaptionElement(style.captionLabel),
                captionIcon && this.renderCaptionIconElement(style.captionIcon),
            ];
        };
    }
    render() {
        const { themedStyle, textStyle, ...restProps } = this.props;
        const componentStyle = this.getComponentStyle(themedStyle);
        const [iconElement, labelElement, captionElement, captionIconElement,] = this.renderComponentChildren(componentStyle);
        return (React.createElement(View, { style: [componentStyle.container, styles.container] },
            labelElement,
            React.createElement(View, { style: [componentStyle.inputContainer, styles.inputContainer] },
                React.createElement(TextInput, Object.assign({ ref: this.textInputRef }, restProps, this.webEventResponder.eventHandlers, { style: [componentStyle.text, styles.text, webStyles.text, textStyle], placeholderTextColor: componentStyle.placeholder.color, editable: !restProps.disabled, onFocus: this.onTextFieldFocus, onBlur: this.onTextFieldBlur })),
                iconElement),
            React.createElement(View, { style: [componentStyle.captionContainer, styles.captionContainer] },
                captionIconElement,
                captionElement)));
    }
}
InputComponent.styledComponentName = 'Input';
const styles = StyleSheet.create({
    container: {},
    inputContainer: {
        flexDirection: 'row',
        alignItems: 'center',
        width: '100%',
    },
    captionContainer: {
        flexDirection: 'row',
        alignItems: 'center',
    },
    text: {
        flexGrow: 1,
        flexShrink: 1,
        flexBasis: 'auto',
    },
    placeholder: {},
    icon: {},
    label: {
        textAlign: 'left',
    },
    captionIcon: {},
    captionLabel: {
        textAlign: 'left',
    },
});
const webStyles = Platform.OS === 'web' && StyleSheet.create({
    text: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
export const Input = styled(InputComponent);
//# sourceMappingURL=input.component.js.map