import React from 'react';
import { Animated, Easing, } from 'react-native';
import { I18nLayoutService } from '../services';
export class TabIndicator extends React.Component {
    constructor() {
        super(...arguments);
        this.contentOffset = new Animated.Value(0);
        this.onContentOffsetAnimationStateChanged = (state) => {
            // no-op
        };
        this.onContentOffsetAnimationStateEnd = (result) => {
            // no-op
        };
        this.createOffsetAnimation = (params) => {
            const animationDuration = params.animated ? this.props.animationDuration : 0;
            return Animated.timing(this.contentOffset, {
                toValue: I18nLayoutService.select(params.offset, -params.offset),
                duration: animationDuration,
                easing: Easing.linear,
            });
        };
        this.onLayout = (event) => {
            this.indicatorWidth = event.nativeEvent.layout.width;
            this.scrollToOffset({
                offset: this.indicatorWidth * this.props.selectedPosition,
                animated: false,
            });
        };
        this.getComponentStyle = () => {
            const widthPercent = 100 / this.props.positions;
            return {
                width: `${widthPercent}%`,
                // @ts-ignore: RN has no types for `Animated` styles
                transform: [{ translateX: this.contentOffset }],
            };
        };
    }
    componentDidMount() {
        this.contentOffset.addListener(this.onContentOffsetAnimationStateChanged);
    }
    shouldComponentUpdate(nextProps) {
        return this.props.selectedPosition !== nextProps.selectedPosition;
    }
    componentDidUpdate() {
        const { selectedPosition: index } = this.props;
        this.scrollToIndex({ index, animated: true });
    }
    componentWillUnmount() {
        this.contentOffset.removeAllListeners();
    }
    /**
     * scrolls indicator to passed index
     *
     * @param params (object) - {
     *  index: number,
     *  animated: boolean | undefined
     * }
     */
    scrollToIndex(params) {
        const { index, ...rest } = params;
        const offset = this.indicatorWidth * index;
        this.scrollToOffset({ offset, ...rest });
    }
    /**
     * scrolls indicator to passed offset
     *
     * @param params (object) - {
     *  offset: number,
     *  animated: boolean | undefined
     * }
     */
    scrollToOffset(params) {
        this.createOffsetAnimation(params).start(this.onContentOffsetAnimationStateEnd);
    }
    render() {
        const { style, ...restProps } = this.props;
        const componentStyle = this.getComponentStyle();
        return (React.createElement(Animated.View, Object.assign({}, restProps, { onLayout: this.onLayout, style: [style, componentStyle] })));
    }
}
TabIndicator.defaultProps = {
    selectedPosition: 0,
    animationDuration: 200,
};
//# sourceMappingURL=tabIndicator.component.js.map