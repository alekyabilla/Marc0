/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { Button } from '../../button/button.component';
import { ChevronDown, } from '../../support/components/chevronDown.component';
import { ChevronLeft, } from '../../support/components/chevronLeft.component';
import { ChevronRight, } from '../../support/components/chevronRight.component';
import { I18nLayoutService } from '../../support/services';
export class CalendarHeader extends React.Component {
    constructor() {
        super(...arguments);
        this.renderTitleIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            return (React.createElement(ChevronDown, Object.assign({ style: styles.headerButtonIcon, fill: tintColor }, svgProps)));
        };
        this.renderLeftIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            const IconComponent = I18nLayoutService.select(ChevronLeft, ChevronRight);
            return (React.createElement(IconComponent, Object.assign({ style: styles.lateralIcon, fill: tintColor }, svgProps)));
        };
        this.renderRightIcon = () => {
            const { tintColor, ...svgProps } = this.props.iconStyle;
            const IconComponent = I18nLayoutService.select(ChevronRight, ChevronLeft);
            return (React.createElement(IconComponent, Object.assign({ style: styles.lateralIcon, fill: tintColor }, svgProps)));
        };
        this.renderLateralNavigationControls = () => {
            return (React.createElement(View, { style: styles.subContainer },
                React.createElement(Button, { style: styles.headerButton, appearance: 'ghost', 
                    // @ts-ignore
                    icon: this.renderLeftIcon, onPress: this.props.onNavigationLeftPress }),
                React.createElement(Button, { style: styles.headerButton, appearance: 'ghost', 
                    // @ts-ignore
                    icon: this.renderRightIcon, onPress: this.props.onNavigationRightPress })));
        };
    }
    render() {
        const { style, titleStyle, onTitlePress, title, lateralNavigationAllowed, ...restProps } = this.props;
        return (React.createElement(View, Object.assign({ style: [styles.container, style] }, restProps),
            React.createElement(Button, { style: styles.headerButton, appearance: 'ghost', textStyle: [titleStyle, styles.headerButtonText], 
                // @ts-ignore
                icon: this.renderTitleIcon, onPress: onTitlePress }, title),
            lateralNavigationAllowed && this.renderLateralNavigationControls()));
    }
}
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    headerButton: {
        flexDirection: 'row-reverse',
    },
    headerButtonText: {
        marginHorizontal: 0,
    },
    headerButtonIcon: {
        marginHorizontal: 0,
    },
    lateralIcon: {
        marginHorizontal: 0,
    },
    subContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
    },
});
//# sourceMappingURL=calendarHeader.component.js.map