/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View, } from 'react-native';
import { CalendarPickerRow, } from './calendarPickerRow.component';
import { CalendarPickerCell, } from './calendarPickerCell.component';
export class CalendarPicker extends React.Component {
    constructor() {
        super(...arguments);
        this.isFirstRangeItem = (item, range) => {
            return range.indexOf(item) === 0;
        };
        this.isLastRangeItem = (item, range) => {
            return range.indexOf(item) === range.length - 1;
        };
        this.renderCellElement = (item, index) => {
            const isFirstRangeItem = this.isFirstRangeItem(item, this.rangedArray);
            const isLastRangeItem = this.isLastRangeItem(item, this.rangedArray);
            return (React.createElement(CalendarPickerCell, { key: index, date: item, selected: this.props.isItemSelected(item), disabled: this.props.isItemDisabled(item), bounding: item.bounding, today: this.props.isItemToday(item), range: item.range, firstRangeItem: isFirstRangeItem, lastRangeItem: isLastRangeItem, onSelect: this.props.onSelect, shouldComponentUpdate: this.props.shouldItemUpdate }, this.props.children));
        };
        this.renderRowElement = (item, index) => {
            return (React.createElement(CalendarPickerRow, { key: index, style: this.props.rowStyle, data: item }, this.renderCellElement));
        };
    }
    get rangedArray() {
        const { data } = this.props;
        return [].concat(...data).filter((item) => {
            return item.range;
        });
    }
    render() {
        const { data, children, ...restProps } = this.props;
        return (React.createElement(View, Object.assign({}, restProps), data.map(this.renderRowElement)));
    }
}
//# sourceMappingURL=calendarPicker.component.js.map