/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleSheet, TouchableOpacity, } from 'react-native';
import { styled, } from '../../../../theme';
class CalendarPickerCellComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.onPress = () => {
            if (this.props.onSelect) {
                this.props.onSelect(this.props.date);
            }
        };
        this.getContainerBorderRadius = (borderRadius) => {
            const { firstRangeItem, lastRangeItem } = this.props;
            if (firstRangeItem) {
                return {
                    borderBottomLeftRadius: borderRadius,
                    borderBottomRightRadius: 0,
                    borderTopLeftRadius: borderRadius,
                    borderTopRightRadius: 0,
                };
            }
            if (lastRangeItem) {
                return {
                    borderBottomLeftRadius: 0,
                    borderBottomRightRadius: borderRadius,
                    borderTopLeftRadius: 0,
                    borderTopRightRadius: borderRadius,
                };
            }
            return {};
        };
        this.getComponentStyle = (source) => {
            const { contentBorderWidth, contentBorderRadius, contentBorderColor, contentBackgroundColor, contentTextFontSize, contentTextLineHeight, contentTextFontWeight, contentTextColor, contentTextFontFamily, borderRadius, ...containerParameters } = source;
            return {
                container: {
                    ...containerParameters,
                    ...this.getContainerBorderRadius(borderRadius),
                },
                contentContainer: {
                    borderWidth: contentBorderWidth,
                    borderRadius: contentBorderRadius,
                    borderColor: contentBorderColor,
                    backgroundColor: contentBackgroundColor,
                },
                contentText: {
                    fontSize: contentTextFontSize,
                    fontWeight: contentTextFontWeight,
                    lineHeight: contentTextLineHeight,
                    color: contentTextColor,
                    fontFamily: contentTextFontFamily,
                },
            };
        };
        this.renderContentElement = (source, style) => {
            return source && source(this.props.date, {
                container: style.contentContainer,
                text: style.contentText,
            });
        };
    }
    shouldComponentUpdate(nextProps) {
        if (nextProps.shouldComponentUpdate) {
            return nextProps.shouldComponentUpdate(this.props, nextProps);
        }
        return true;
    }
    render() {
        const { style, themedStyle, date, bounding, children, ...restProps } = this.props;
        const { container, ...componentStyles } = this.getComponentStyle(themedStyle);
        return (React.createElement(TouchableOpacity, Object.assign({ activeOpacity: 1.0, onPress: this.onPress }, restProps, { style: [container, styles.container, style] }), this.renderContentElement(children, componentStyles)));
    }
}
CalendarPickerCellComponent.styledComponentName = 'CalendarCell';
const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
});
export const CalendarPickerCell = styled(CalendarPickerCellComponent);
//# sourceMappingURL=calendarPickerCell.component.js.map