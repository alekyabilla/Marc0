/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { styled, } from '../../theme';
import { List, } from '../list/list.component';
import { Divider, } from '../divider/divider.component';
import { MenuItem, } from './menuItem.component';
import { SubMenu } from './subMenu.component';
import { MenuService } from './menu.service';
/**
 * `Menu` renders vertical list of `MenuItems`.
 *
 * @extends React.Component
 *
 * @property {string} appearance - Determines the appearance of the component.
 * Can be `default` or `noDivider`.
 * Default is `default`.
 *
 * @property {MenuItemType[]} data - Determines menu items.
 *
 * @property {number} selectedIndex - The index of selected item.
 *
 * @property {(index: number, event?: GestureResponderEvent) => void} onSelect - Fires when
 * selected item is changed.
 *
 * @property {Omit<ListProps, 'renderItem'>} ...ListProps - Any props applied to List component, excluding `renderItem`.
 *
 * @overview-example MenuSimpleUsage
 *
 * @overview-example MenuWithSubMenu
 *
 * @overview-example MenuWithIcons
 *
 * @overview-example MenuDisabledOptions
 *
 * @overview-example MenuWithoutDivider
 *
 * @example MenuInlineStyling
 */
class MenuComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.service = new MenuService();
        this.onSelect = (selectedIndex, event) => {
            if (this.props.onSelect) {
                this.props.onSelect(selectedIndex, event);
            }
        };
        this.isDividerAbsent = () => {
            const { appearance } = this.props;
            return appearance !== 'noDivider';
        };
        this.areThereSubItems = (item) => {
            return item.subItems && item.subItems.length !== 0;
        };
        this.getIsSelected = (item) => {
            const { selectedIndex } = this.props;
            return selectedIndex === item.menuIndex;
        };
        this.renderMenuItem = (info) => {
            const { selectedIndex } = this.props;
            const isSelected = this.getIsSelected(info.item);
            return this.areThereSubItems(info.item) ? (React.createElement(SubMenu, { item: info.item, selectedIndex: selectedIndex, divider: this.renderDivider(), onSelect: this.onSelect })) : (React.createElement(MenuItem, Object.assign({}, info.item, { selected: isSelected, onPress: this.onSelect })));
        };
        this.renderDivider = () => {
            return this.isDividerAbsent() && (React.createElement(Divider, null));
        };
    }
    render() {
        const { appearance, data, ...restProps } = this.props;
        const items = this.service.setIndexes(data);
        return (React.createElement(List, Object.assign({ ItemSeparatorComponent: this.renderDivider, renderItem: this.renderMenuItem, data: items }, restProps)));
    }
}
MenuComponent.styledComponentName = 'Menu';
export const Menu = styled(MenuComponent);
//# sourceMappingURL=menu.component.js.map