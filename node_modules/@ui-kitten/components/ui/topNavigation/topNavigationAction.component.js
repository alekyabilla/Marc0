/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { Platform, StyleSheet, TouchableOpacity, } from 'react-native';
import { Interaction, styled, } from '../../theme';
import { WebEventResponder, } from '../support/services';
/**
 * The `TopNavigationAction` component is a part of the `TopNavigation` component.
 * `TopNavigationActions` should be used in `TopNavigation` to provide usable component.
 * See usage examples at `TopNavigation` component documentation.
 *
 * @extends React.Component
 *
 * @property {(style: ImageStyle) => ReactElement} icon - Determines the icon of the component.
 *
 * @property {TouchableOpacityProps} ...TouchableOpacityProps - Any props applied to TouchableOpacity component.
 *
 * @overview-example TopNavigationActionSimpleUsage
 *
 * @example TopNavigationActionExternalSourceIcon
 *
 * @example TopNavigationActionInlineStyling
 */
class TopNavigationActionComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.webEventResponder = WebEventResponder.create(this);
        this.onMouseEnter = () => {
            this.props.dispatch([Interaction.HOVER]);
        };
        this.onMouseLeave = () => {
            this.props.dispatch([]);
        };
        this.onFocus = () => {
            this.props.dispatch([Interaction.FOCUSED]);
        };
        this.onBlur = () => {
            this.props.dispatch([]);
        };
        this.onPress = (event) => {
            if (this.props.onPress) {
                this.props.onPress(event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.getComponentStyle = (source) => {
            const { iconTintColor, iconWidth, iconHeight, iconMarginHorizontal, } = source;
            return {
                container: {
                    marginHorizontal: iconMarginHorizontal,
                },
                icon: {
                    tintColor: iconTintColor,
                    width: iconWidth,
                    height: iconHeight,
                    ...styles.icon,
                },
            };
        };
        this.createHitSlopInsets = (iconStyle) => {
            const flatStyle = StyleSheet.flatten(iconStyle);
            // @ts-ignore: `width` is restricted to be a number
            const value = 40 - flatStyle.width;
            return {
                left: value,
                top: value,
                right: value,
                bottom: value,
            };
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return React.cloneElement(iconElement, {
                style: [style, iconElement.props.style],
            });
        };
    }
    render() {
        const { themedStyle, style, icon, ...touchableProps } = this.props;
        const componentStyle = this.getComponentStyle(themedStyle);
        const hitSlopInsets = this.createHitSlopInsets(componentStyle.icon);
        const iconElement = this.renderIconElement(componentStyle.icon);
        return (React.createElement(TouchableOpacity, Object.assign({ activeOpacity: 1.0, hitSlop: hitSlopInsets }, touchableProps, this.webEventResponder.eventHandlers, { style: [componentStyle.container, styles.container, webStyles.container, style], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }), iconElement));
    }
}
TopNavigationActionComponent.styledComponentName = 'TopNavigationAction';
const styles = StyleSheet.create({
    container: {},
    icon: {},
});
const webStyles = Platform.OS === 'web' && StyleSheet.create({
    container: {
        // @ts-ignore
        outlineWidth: 0,
    },
});
export const TopNavigationAction = styled(TopNavigationActionComponent);
//# sourceMappingURL=topNavigationAction.component.js.map