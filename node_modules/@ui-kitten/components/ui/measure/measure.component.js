/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { findNodeHandle, UIManager, } from 'react-native';
import { Frame } from './type';
/**
 * Measures child element size and it's screen position asynchronously.
 * Returns measure result in `onMeasure` callback.
 *
 * Usage:
 *
 * const onMeasure = (frame: Frame): void => {
 *   const { x, y } = frame.origin;
 *   const { width, height } = frame.size;
 *   ...
 * };
 *
 * <MeasureElement onMeasure={onMeasure}>
 *   <ElementToMeasure />
 * </MeasureElement>
 */
export const MeasureElement = (props) => {
    const ref = React.useRef();
    const bindToWindow = (frame, window) => {
        if (frame.origin.x < window.size.width) {
            return frame;
        }
        const boundFrame = new Frame(frame.origin.x - window.size.width, frame.origin.y, frame.size.width, frame.size.height);
        return bindToWindow(boundFrame, window);
    };
    const onUIManagerMeasure = (x, y, w, h) => {
        const frame = bindToWindow(new Frame(x, y, w, h), Frame.window());
        props.onMeasure(frame);
    };
    const onLayout = () => {
        const node = findNodeHandle(ref.current);
        UIManager.measureInWindow(node, onUIManagerMeasure);
    };
    return React.cloneElement(props.children, { ref, onLayout });
};
//# sourceMappingURL=measure.component.js.map