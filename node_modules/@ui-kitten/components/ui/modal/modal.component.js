/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View, StyleSheet, } from 'react-native';
import { ModalService, } from '../../theme';
import { MeasureElement, } from '../measure/measure.component';
import { Frame, Size, } from '../measure/type';
const window = Frame.window();
export const baseModalTestId = '@modal/base';
/**
 * `Modal` component is a wrapper than presents content above an enclosing view.
 *
 * @extends React.Component
 *
 * @property {boolean} visible - Determines whether component is visible. By default is false.
 *
 * @property {ReactElement | ReactElement[]} children - Determines component's children.
 *
 * @property {boolean} allowBackdrop - Determines whether user can tap on back-drop.
 * Default is `false`.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @property {ViewProps} ...ViewProps - Any props applied to View component.
 *
 * @overview-example ModalSimpleUsage
 *
 * @overview-example ModalWithBackdrop
 */
export class Modal extends React.Component {
    constructor() {
        super(...arguments);
        this.contentSize = Size.zero();
        this.id = '';
        this.handleVisibility = (props) => {
            const { allowBackdrop, onBackdropPress } = this.props;
            if (props.visible) {
                const element = this.renderModal();
                this.id = ModalService.show(element, { allowBackdrop, onBackdropPress });
            }
            else {
                this.id = ModalService.hide(this.id);
            }
        };
        this.getAbsoluteRelatedStyle = () => {
            const windowFrame = Frame.window();
            return {
                top: (windowFrame.size.height - this.contentSize.height) / 2,
                left: (windowFrame.size.width - this.contentSize.width) / 2,
            };
        };
        this.onMeasure = (frame) => {
            this.contentSize = frame.size;
        };
        this.renderBaseModal = () => {
            const { style, children, ...restProps } = this.props;
            const absoluteRelatedStyle = this.getAbsoluteRelatedStyle();
            return (React.createElement(View, Object.assign({}, restProps, { testID: baseModalTestId, style: [styles.container, absoluteRelatedStyle, style] }), children));
        };
        this.renderModal = () => {
            const { backdropStyle } = this.props;
            const modal = this.renderBaseModal();
            return backdropStyle ? (React.createElement(React.Fragment, null,
                React.createElement(View, { pointerEvents: 'box-none', style: [styles.backdrop, backdropStyle] }),
                modal)) : modal;
        };
        this.renderMeasureNode = () => {
            const modal = this.renderBaseModal();
            const measureStyledModal = React.cloneElement(modal, {
                style: [modal.props.style, styles.hiddenModal],
                pointerEvents: 'none',
            });
            return (React.createElement(MeasureElement, { onMeasure: this.onMeasure }, measureStyledModal));
        };
    }
    componentDidUpdate(prevProps) {
        if (prevProps.visible !== this.props.visible) {
            this.handleVisibility(this.props);
        }
        else if (prevProps.visible && this.props.visible) {
            const element = this.renderModal();
            ModalService.update(this.id, element.props.children);
        }
    }
    render() {
        return this.renderMeasureNode();
    }
}
Modal.defaultProps = {
    onBackdropPress: () => null,
};
const styles = StyleSheet.create({
    container: {
        position: 'absolute',
    },
    backdrop: {
        position: 'absolute',
        width: window.size.width,
        height: window.size.height,
    },
    hiddenModal: {
        opacity: 0,
    },
});
//# sourceMappingURL=modal.component.js.map