/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { StyleSheet, View, } from 'react-native';
import { styled, } from '../../theme';
import { Text, } from '../text/text.component';
import { Popover, } from '../popover/popover.component';
import { PopoverIndicator } from '../popover/popoverIndicator.component';
/**
 * Tooltip displays informative text when users focus on or tap an element.
 *
 * @extends React.Component
 *
 * @property {boolean} visible - Determines whether popover is visible or not.
 *
 * @property {string} text - Determines the text of the tooltip
 *
 * @property {(style: StyleType) => ReactElement} icon - Determines icon of the component.
 *
 * @property {StyleProp<TextStyle>} textStyle - Customizes text style.
 *
 * @property {ReactElement} children - Determines the element "above" which popover will be shown.
 *
 * @property {string | PopoverPlacement} placement - Determines the actualPlacement of the popover.
 * Can be `left`, `top`, `right`, `bottom`, `left start`, `left end`, `top start`, `top end`, `right start`,
 * `right end`, `bottom start` or `bottom end`.
 * Default is `bottom`.
 * Tip: use one of predefined placements instead of strings, e.g `PopoverPlacements.TOP`
 *
 * @property {boolean} fullWidth - Determines whether content element should have same width as child element.
 *
 * @property {boolean} allowBackdrop - Determines whether user can tap on back-drop.
 * Default is `false`.
 *
 * @property {StyleProp<ViewStyle>} backdropStyle - Determines the style of backdrop.
 *
 * @property {() => void} onBackdropPress - Determines component's behavior when the user is
 * tapping on back-drop.
 *
 * @overview-example TooltipSimpleUsage
 *
 * @overview-example TooltipWithIcon
 *
 * @overview-example TooltipStyledBackdrop
 *
 * @overview-example TooltipPlacement
 *
 * @example TooltipWithExternalSourceIcon
 *
 * @example TooltipInlineStyling
 */
export class TooltipComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.getComponentStyle = (source) => {
            const { indicatorBackgroundColor, iconWidth, iconHeight, iconMarginHorizontal, iconTintColor, textMarginHorizontal, textFontSize, textFontWeight, textLineHeight, textFontFamily, textColor, ...containerParameters } = source;
            return {
                container: containerParameters,
                content: {},
                indicator: {
                    backgroundColor: indicatorBackgroundColor,
                },
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    marginHorizontal: iconMarginHorizontal,
                    tintColor: iconTintColor,
                },
                text: {
                    marginHorizontal: textMarginHorizontal,
                    fontSize: textFontSize,
                    lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    fontFamily: textFontFamily,
                    color: textColor,
                },
            };
        };
        this.renderTextElement = (style) => {
            return (React.createElement(Text, { key: 1, style: [style, this.props.textStyle] }, this.props.text));
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return React.cloneElement(iconElement, {
                key: 0,
                style: [style, iconElement.props.style],
            });
        };
        this.renderContentElementChildren = (style) => {
            return [
                this.props.icon && this.renderIconElement(style.icon),
                this.renderTextElement(style.text),
            ];
        };
        this.renderPopoverIndicatorElement = (style) => {
            const { indicator } = this.getComponentStyle(this.props.themedStyle);
            return (React.createElement(PopoverIndicator, { style: indicator }));
        };
        this.renderPopoverContentElement = (style) => {
            const { content, ...childrenStyle } = style;
            const contentChildren = this.renderContentElementChildren(childrenStyle);
            return (React.createElement(View, { style: [content, styles.content] }, contentChildren));
        };
    }
    render() {
        const { themedStyle, style, children, ...props } = this.props;
        const { container, indicator, ...componentStyle } = this.getComponentStyle(themedStyle);
        const contentElement = this.renderPopoverContentElement(componentStyle);
        return (React.createElement(Popover, Object.assign({}, props, { style: [container, style], content: contentElement, indicator: this.renderPopoverIndicatorElement }), children));
    }
}
TooltipComponent.styledComponentName = 'Tooltip';
const styles = StyleSheet.create({
    content: {
        flexDirection: 'row',
        justifyContent: 'center',
    },
});
export const Tooltip = styled(TooltipComponent);
//# sourceMappingURL=tooltip.component.js.map