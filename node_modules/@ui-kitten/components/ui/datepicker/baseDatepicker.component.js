import React from 'react';
import { StyleSheet, TouchableOpacity, View, } from 'react-native';
import { Interaction, } from '../../theme';
import { Text, } from '../text/text.component';
import { Popover } from '../popover/popover.component';
import { NativeDateService } from '../calendar/service/nativeDate.service';
import { PopoverPlacements } from '../popover/type';
const FULL_DATE_FORMAT_STRING = 'DD/MM/YYYY';
export class BaseDatepickerComponent extends React.Component {
    constructor() {
        super(...arguments);
        this.state = {
            visible: false,
        };
        this.getComponentStyle = (style) => {
            const { textFontSize, textLineHeight, textFontWeight, textFontFamily, textColor, iconWidth, iconHeight, iconTintColor, popoverWidth, ...containerStyles } = style;
            return {
                control: containerStyles,
                icon: {
                    width: iconWidth,
                    height: iconHeight,
                    tintColor: iconTintColor,
                },
                text: {
                    fontSize: textFontSize,
                    lineHeight: textLineHeight,
                    fontWeight: textFontWeight,
                    color: textColor,
                    fontFamily: textFontFamily,
                },
                popover: {
                    width: popoverWidth,
                },
            };
        };
        this.onPress = (event) => {
            this.setVisibility();
            if (this.props.onPress) {
                this.props.onPress(event);
            }
        };
        this.onPressIn = (event) => {
            this.props.dispatch([Interaction.ACTIVE]);
            if (this.props.onPressIn) {
                this.props.onPressIn(event);
            }
        };
        this.onPressOut = (event) => {
            this.props.dispatch([]);
            if (this.props.onPressOut) {
                this.props.onPressOut(event);
            }
        };
        this.setVisibility = () => {
            const visible = !this.state.visible;
            this.setState({ visible }, this.dispatchActive);
        };
        this.dispatchActive = () => {
            if (this.state.visible) {
                this.props.dispatch([Interaction.ACTIVE]);
            }
            else {
                this.props.dispatch([]);
            }
        };
        this.renderIconElement = (style) => {
            const iconElement = this.props.icon(style);
            return React.cloneElement(iconElement, {
                style: [style, iconElement.props.style],
            });
        };
        this.renderTextElement = (style) => {
            return (React.createElement(Text, { style: style, numberOfLines: 1, ellipsizeMode: 'tail' }, this.getComponentTitle()));
        };
        this.renderControlChildren = (style) => {
            return [
                this.props.icon && this.renderIconElement(style.icon),
                this.renderTextElement(style.text),
            ];
        };
        this.renderControlElement = (style) => {
            const { themedStyle, controlStyle, ...restProps } = this.props;
            const [iconElement, textElement] = this.renderControlChildren(style);
            return (React.createElement(TouchableOpacity, Object.assign({}, restProps, { activeOpacity: 1.0, style: [styles.control, style.control, controlStyle], onPress: this.onPress, onPressIn: this.onPressIn, onPressOut: this.onPressOut }),
                textElement,
                iconElement));
        };
        this.renderComponentChildren = (style) => {
            return [
                this.renderCalendar(),
                this.renderControlElement(style),
            ];
        };
    }
    formatDateToString(date) {
        return this.props.dateService.format(date, FULL_DATE_FORMAT_STRING);
    }
    render() {
        const { themedStyle, style } = this.props;
        const { popover, ...componentStyle } = this.getComponentStyle(themedStyle);
        const [calendarElement, controlElement] = this.renderComponentChildren(componentStyle);
        return (React.createElement(View, { style: style },
            React.createElement(Popover, { style: [popover, styles.popover], placement: PopoverPlacements.BOTTOM_START, visible: this.state.visible, content: calendarElement, onBackdropPress: this.setVisibility }, controlElement)));
    }
}
BaseDatepickerComponent.defaultProps = {
    dateService: new NativeDateService(),
    placeholder: 'dd/mm/yyyy',
};
const styles = StyleSheet.create({
    control: {
        flexDirection: 'row',
        alignItems: 'center',
        justifyContent: 'space-between',
    },
    popover: {
        borderWidth: 0,
    },
});
//# sourceMappingURL=baseDatepicker.component.js.map