/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import React from 'react';
import { View, StyleSheet, TouchableOpacity, } from 'react-native';
export class ModalResolver extends React.Component {
    constructor() {
        super(...arguments);
        this.onBackdropPress = () => {
            const { allowBackdrop, onBackdropPress } = this.props;
            if (allowBackdrop) {
                onBackdropPress();
            }
        };
        this.onStartShouldSetResponder = () => {
            return true;
        };
        this.onResponderRelease = () => {
            return;
        };
        this.onStartShouldSetResponderCapture = () => {
            return false;
        };
        this.renderComponentChild = (source) => {
            return React.cloneElement(source, {
                style: [source.props.style, this.props.style],
            });
        };
        this.renderComponentChildren = (source) => {
            return React.Children.map(source, this.renderComponentChild);
        };
        this.renderWithBackDrop = (component) => {
            return (React.createElement(TouchableOpacity, { style: [styles.container, this.props.style], onPress: this.onBackdropPress, activeOpacity: 1 }, component));
        };
        this.renderWithoutBackDrop = (component) => {
            return (React.createElement(View, { style: styles.notVisibleWrapper },
                React.createElement(View, { style: styles.container, pointerEvents: 'none' }),
                component));
        };
        this.renderComponent = () => {
            const { children, allowBackdrop, ...derivedProps } = this.props;
            const componentChildren = this.renderComponentChildren(children);
            const dialog = React.createElement(View, Object.assign({}, derivedProps, { style: styles.contentWrapper, onStartShouldSetResponder: this.onStartShouldSetResponder, onResponderRelease: this.onResponderRelease, onStartShouldSetResponderCapture: this.onStartShouldSetResponderCapture, pointerEvents: 'box-none' }), componentChildren);
            return allowBackdrop ?
                this.renderWithBackDrop(dialog) : this.renderWithoutBackDrop(dialog);
        };
    }
    render() {
        return this.props.visible ? this.renderComponent() : null;
    }
}
ModalResolver.defaultProps = {
    visible: false,
};
const styles = StyleSheet.create({
    container: StyleSheet.absoluteFillObject,
    notVisibleWrapper: {
        position: 'absolute',
        width: 0,
        height: 0,
    },
    contentWrapper: {
        alignSelf: 'flex-start',
    },
});
//# sourceMappingURL=modalResolver.component.js.map